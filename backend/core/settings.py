import os
import socket
import dj_database_url
# import django


# os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')  # adjust if your settings module is different

# try:
#     django.setup()
# except Exception as e:
#     print('Django setup failed:', e)

# from django.contrib.auth import get_user_model

# User = get_user_model()
# username = "robin"
# password = "210703"

# if not User.objects.filter(username=username).exists():
#     User.objects.create_superuser(username=username, password=password)
#     print("Superuser 'robin' created!")
# else:
#     print("Superuser 'robin' already exists.")
    
    
    
    
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+3^h@rrts_-eu5)2ip0_y#f)i#fy_ygy8$c!p=o=-r3*)9gu_h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['.onrender.com', 'localhost']
ALLOWED_HOSTS = ['*']


CORS_ALLOWED_ORIGINS = [
    "https://dinu-robin-frontend.onrender.com",
    "http://localhost:5173",
    "http://127.0.0.1:3000",
    "http://localhost:3000"
    # f"http://{socket.gethostbyname(socket.gethostname())}:3000",  # Your local IP
    # f"http://{socket.gethostbyname(socket.gethostname())}:5173",  # Your local IP for Vite
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
         'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
         
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # <--- THIS IS REQUIRED!
        'NAME': 'portfoliodatabase_gmhx',           # your database name
        'USER': 'robin',                            # your database user
        'PASSWORD': 'Xx9vUP4e7gwpuqX4PqmfrsmFgza4dmXw',                       # your database password
        'HOST': 'dpg-d1ehlr6uk2gs73ao1os0-a.oregon-postgres.render.com',  # your database host
        'PORT': '5432',   
         'OPTIONS': {
            'sslmode': 'require',
        },# default PostgreSQL port
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' 

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'portfolio',      
    'resume',
    'contact', 
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


CORS_ALLOW_ALL_ORIGINS = False

# Media files

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024 
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}





# Add this at the very end of settings.py

# import django
# from django.contrib.auth import get_user_model

# django.setup()
# User = get_user_model()
# username = "robin"
# password = "210703"
# email = "dinurobin21@gmail.com"

# if not User.objects.filter(username=username).exists():
#     User.objects.create_superuser(username=username, email=email, password=password)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django_error.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}